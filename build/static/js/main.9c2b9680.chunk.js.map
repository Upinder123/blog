{"version":3,"sources":["components/Header/index.js","components/Hero/index.js","containers/About/index.js","components/BlogPost/index.js","components/Sidebar/index.js","containers/Post/index.js","components/Projects/index.js","components/AllPosts/index.js","components/Navbar/index.js","pages/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","target","Hero","style","textDecoration","About","BlogPost","useState","post","setPost","setPostId","useEffect","postId","match","params","blogPost","data","find","id","blogImage","class","blogTitle","blogCategory","src","width","blogText","postedOn","author","Sidebar","posts","setPosts","map","key","to","Post","height","overflow","Projects","AllPosts","Component","MainPage","App","color","document","querySelector","textContent","toLowerCase","setProperty","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c2b9680.chunk.js","sourcesContent":["import React from 'react';\n\n\n/**\n* @author\n* @function Header\n**/\n\nconst Header = (props) => {\n  return(\n    <div>\n    <header className=\"header\">   \n        <div>  &nbsp; \n            <a href=\"https://www.linkedin.com/in/upinderjit singh/\" target=\"_blank\"><i className=\"fa fa-linkedin-square\"></i> </a>\n            <a href=\"https://github.com/upinder123\"><i className=\"fa fa-github-square\"></i> </a>\n        </div>\n     </header>\n    </div>\n   )\n\n }\n\nexport default Header\n","import React from 'react';\n\n/**\n* @author\n* @function Hero\n**/\n\nconst Hero = (props) => {\n  return(\n          <div className=\"hero-image\">\n            <div className=\"content\">\n             <a href=\"/\" style={{textDecoration:\"none!important;\"}}> <span className=\"title\">React<span>Blog</span></span></a>\n            </div>\n          </div>\n   )\n }\n\nexport default Hero","import React from 'react'\n\n/**\n* @author\n* @function About\n**/\n\nconst About = (props) => {\n  return(\n    <div>About</div>\n   )\n\n }\n\nexport default About","import React , {useState, useEffect} from 'react';\n\n\nimport blogPost from '../../data/blog.json';\n\n/**\n* @author\n* @function BlogPost\n**/\n\nconst BlogPost = (props) => {\n\nconst [post,setPost] = useState({});\n//reload the content\nconst[postId,setPostId] = useState(\"\");\n\nuseEffect(()=>{\n  const postId = props.match.params.postId;\n  const post = blogPost.data.find(post => post.id == postId);\n  setPost(post);\n  setPostId(postId);\n}, [post, props.match.params.postId]);\n\nif(post.blogImage == \"\") return null;\n\n  return(\n<div>\n\n\n\n\n<div className=\"blog-post-container\">\n\n\n\n\n\n<h3 class=\"my-5\">{post.blogTitle}</h3>\n<div className=\"post-thumb\">\n\n<span class=\"blog-post-tag\">{post.blogCategory}</span>\n  <img src={post.blogImage} style={{width:\"100%\"}}/>\n  \n  {/* <img src={require('../../assets/images/mustang.jpg')} /> */}\n</div>\n<div className=\"blog-post-text\">\n\n<div>{post.blogText}</div>\n<p className=\"mt-5 text-muted\">Posted on: {post.postedOn} by {post.author}</p>\n</div>\n\n</div></div>\n\n   )\n\n }\n\nexport default BlogPost","\nimport React, { useState, useEffect } from 'react';\nimport blogPost from '../../data/blog.json';\nimport { NavLink } from 'react-router-dom';\n\n/**\n* @author\n* @function Sidebar \n**/\n\nconst Sidebar = (props) => {\n\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n\n    const posts = blogPost.data;\n    setPosts(posts);\n  }, posts);\n\n  return (\n\n    <div>\n\n      {\n        posts.map(post => {\n\n          return (\n\n\n\n\n            <div >\n\n\n              <img style={{ width: \"100%\" }} src={post.blogImage} />\n\n\n              <NavLink key={post.id} to={`/post/${post.id}`}>  <div className=\"post-title\">{post.blogTitle}</div>  </NavLink>\n\n\n\n\n            </div>\n\n\n\n\n\n\n          )\n\n        })\n      }\n\n    </div>\n  )\n\n}\n\nexport default Sidebar;","import React from 'react'\n\n\nimport BlogPost from '../../components/BlogPost';\nimport Sidebar from '../../components/Sidebar';\n/**\n* @author\n* @function Post\n**/\n\nconst Post = (props) => {\n\n  return(\n\n<div className=\"row justify-content-between\">\n<div class=\"col-md-8 \">\n<BlogPost {...props}/>\n\n\n</div>\n<div class=\"col-md-offset-2 col-md-2 mt-5\" style={{height:\"50vh\", overflow:\"hidden;\"}}><Sidebar /></div>\n\n</div>\n\n   )\n\n }\n\nexport default Post","import React, { useState, useEffect } from 'react';\nimport blogPost from '../../data/blog.json';\n\n/**\n* @author\n* @function BlogPost\n**/\n\nconst Projects = (props) => {\n\n  const [Projects, setPost] = useState({});\n\n  //reload the content\n  const [postId, setPostId] = useState(\"\");\n\n  useEffect(() => {\n    const postId = props.match.params.postId;\n    const Projects = blogPost.data.find(post => post.id == postId);\n    setPost(Projects);\n    setPostId(postId);\n  }, [Projects, props.match.params.postId]);\n\n  if (Projects.blogImage === \"\")\n    return null;\n\n  return (\n  \n    <div>\n      <div className=\"blog-post-container\">\n        <h3 class=\"my-5\">{Projects.blogTitle}</h3>\n        <div className=\"post-thumb\">\n          <span class=\"blog-post-tag\">{Projects.blogCategory}</span>\n          <img src={Projects.blogImage} style={{ width: \"100%\" }} />\n\n          {/* <img src={require('../../assets/images/mustang.jpg')} /> */}\n        </div>\n        <div className=\"blog-post-text\">\n\n          <div>{Projects.blogText}</div>\n          <p className=\"mt-5 text-muted\">Posted on: {Projects.postedOn} by {Projects.author}</p>\n        </div>\n\n      </div></div>\n\n  )\n\n}\n\nexport default Projects;\n","\nimport React, { useState, useEffect } from 'react';\nimport blogPost from '../../data/blog.json';\nimport { NavLink } from 'react-router-dom';\n\n/**\n* @author\n* @function AllPosts \n**/\n\nconst AllPosts  = (props) => {\n\n  const [posts, setPosts] = useState([]);\n\n  useEffect(()=>{\n\n    const posts = blogPost.data;\n    setPosts(posts);\n  }, posts);\n\n  return(\n\n    <div className=\"row\">\n\n{\n  posts.map(post => {\n\n    return(\n\n     \n\n\n      <div className=\"col-md-3\">\n\n\n           <img src={post.blogImage} style={{width: \"100%\"}} />\n   \n    <p className=\"lead\">\n    <NavLink key={post.id} to={`/post/${post.id}`}>  <div className = \"post-title\">{post.blogTitle}</div>  </NavLink>\n\n    </p>\n\n\n       </div>\n           \n     \n\n\n\n\n    )\n\n  })\n}\n\n    </div>\n   )\n\n }\n\nexport default AllPosts ","// // const Component = React.Component,\n// \t\t\tRouter = ReactRouterDOM.BrowserRouter,\n// \t\t\tLink = ReactRouterDOM.Link,\n// \t\t\tSwitch = ReactRouterDOM.Switch,\n// \t\t\tRoute = ReactRouterDOM.Route;\n\nimport React,{ Component } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n  } from \"react-router-dom\";\n// in a stateful component render a simple navigation bar and an element which depends on which link is active\nclass Navbar extends Component {\n \n  // when the component is updated (which also occurs as the new routes are included)\n  // consider the text of the main header and alter the CSS custom property to style the background of the header in the navigation bar and the color of the header according to which route is included\n  componentDidUpdate() {\n    let header = document.querySelector(\"h1\");\n    let text = header.textContent.toLowerCase();\n    let color;\n    switch(text) {\n      case 'about':\n        color = \"#16A085\";\n        break;\n      case 'projects':\n        color = \"#E74C3C\";\n        break;\n      case 'contacts':\n        color = \"#2980B9\";\n        break;\n      case 'blog':\n        color = \"#2980B9\";\n        break;\n      default:\n        color = \"#F1C40F\";\n        break;\n    }\n    // update the custom property for the root element and have it cascade on the header as well\n    let root = document.querySelector(\":root\");\n    root.style.setProperty(\"--color-home\", color);\n  }\n\n  /* render \n  - a nav with a header and three anchor links elements\n    in the nav, include Links from the routing library, directing toward differents paths\n  - a header displaying the path of the application\n    through a switch, include routes which exclude one another \n    render a simple element in the route to visualize the change in the URL path\n  */\n  render() {\n    return (\n      <div className=\"App\">\n\n        <nav className=\"Navbar\">\n          <h2>btf</h2>\n          <ul>\n            <li>\n              <Link to=\"/about\">about</Link>\n            </li>\n            <li>\n              <Link to=\"/projects\">projects</Link>\n            </li>\n            <li>\n              <Link to=\"/contacts\">contacts</Link>\n            </li>\n\t\t\t\t\t\t <li>\n              <Link to=\"/Blog\">Blog</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <h1>Home</h1>\n          </Route>\n          <Route path=\"/about\">\n            <h1>About</h1>\n          </Route>\n          <Route path=\"/projects\">\n            <h1>Projects</h1>\n          </Route>\n          <Route path=\"/contacts\">\n            <h1>Contacts</h1>\n          </Route>\n\t\t\t\t\t<Route path=\"/blog\">\n            <h1>Blog</h1>\n          </Route>\n\n        </Switch>\n\n      </div>\n    );\n  }\n\t\n}\n\n\n// // render the single component responsible for the navigation bar, wrapped in the router element\n// ReactDOM.render(\n//   <Router>\n//     <App />\n//   </Router>\n//   , document.getElementById('root'));\nexport default Navbar","import React from \"react\";\n\nimport AllPosts from '../components/AllPosts';\nconst MainPage = () => {\n    return(\n\n        <div>\n            <h3 className=\"my-3\">All Posts</h3>\n            <AllPosts />\n        </div>\n  \n\n    )\n}\n\nexport  default MainPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Hero from './components/Hero';\nimport About from './containers/About';\nimport Post from './containers/Post';\nimport Projects from './components/Projects';\nimport Navbar from './components/Navbar';\nimport AllPosts from './components/AllPosts';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\n\nimport MainPage from './pages';\nimport PageNotFound from './pages/404';\n\nclass App extends Component {\n  componentDidUpdate() {\n    let header = document.querySelector(\"h1\");\n    let text = header.textContent.toLowerCase();\n    let color;\n    switch (text) {\n      case 'about':\n        color = \"#16A085\";\n        break;\n      case 'projects':\n        color = \"#E74C3C\";\n        break;\n      case 'contacts':\n        color = \"#2980B9\";\n        break;\n      case 'blog':\n        color = \"#2980B9\";\n        break;\n      default:\n        color = \"#F1C40F\";\n        break;\n    }\n    let root = document.querySelector(\":root\");\n    root.style.setProperty(\"--color-home\", color);\n  };\n  render() {\n    return (\n\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <nav className=\"Navbar\">\n            <h2>UJ</h2>\n            <ul>\n              <li>\n                <Link to=\"/about\">about</Link>\n              </li>\n              <li>\n                <Link to=\"/Projects\">Projects</Link>\n              </li>\n              <li>\n                <Link to=\"/contacts\">contacts</Link>\n              </li>\n              <li>\n                <Link to=\"/\">Blog</Link>\n              </li>\n            </ul>\n          </nav>\n          <Hero />\n\n          <div className=\"container\">\n\n            <Switch>\n\n\n              <Route exact path=\"/\" component={MainPage} />\n              <Route path=\"/about\" component={About} />\n              <Route exact path=\"/post/:postId\" component={Post} />\n              <Route path=\"/about\"><h1>About</h1></Route>\n              <Route path=\"/Projects\" component={Projects}><h1>Projects</h1></Route>\n              <Route path=\"/contacts\"><h1>Contacts</h1></Route>\n              <Route path=\"/\" ><h1>Blog</h1></Route>\n            </Switch>\n          </div>\n\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}